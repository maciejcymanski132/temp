/*
 * EmployeesAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SesamInsight.Explore.WebApi.Client.Client.OpenAPIDateConverter;

namespace SesamInsight.Explore.WebApi.Client.Model
{
    /// <summary>
    /// EmployeeDto
    /// </summary>
    [DataContract]
    public partial class EmployeeDto :  IEquatable<EmployeeDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets WorkerType
        /// </summary>
        [DataMember(Name="workerType", EmitDefaultValue=false)]
        public WorkerType? WorkerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmployeeDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="age">age.</param>
        /// <param name="experience">experience.</param>
        /// <param name="address">address (required).</param>
        /// <param name="workerType">workerType.</param>
        /// <param name="strength">strength.</param>
        /// <param name="commission">commission.</param>
        /// <param name="efficiency">efficiency.</param>
        /// <param name="intelligence">intelligence.</param>
        /// <param name="officeStation">officeStation.</param>
        public EmployeeDto(string name = default(string), string lastName = default(string), int age = default(int), float experience = default(float), Address address = default(Address), WorkerType? workerType = default(WorkerType?), int? strength = default(int?), int? commission = default(int?), int? efficiency = default(int?), int? intelligence = default(int?), Guid? officeStation = default(Guid?))
        {
            this.Name = name;
            this.LastName = lastName;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for EmployeeDto and cannot be null");
            }
            else
            {
                this.Address = address;
            }

            this.Strength = strength;
            this.Commission = commission;
            this.Efficiency = efficiency;
            this.Intelligence = intelligence;
            this.OfficeStation = officeStation;
            this.Name = name;
            this.LastName = lastName;
            this.Age = age;
            this.Experience = experience;
            this.WorkerType = workerType;
            this.Strength = strength;
            this.Commission = commission;
            this.Efficiency = efficiency;
            this.Intelligence = intelligence;
            this.OfficeStation = officeStation;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public int Age { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [DataMember(Name="experience", EmitDefaultValue=false)]
        public float Experience { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public Address Address { get; set; }


        /// <summary>
        /// Gets or Sets Strength
        /// </summary>
        [DataMember(Name="strength", EmitDefaultValue=true)]
        public int? Strength { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=true)]
        public int? Commission { get; set; }

        /// <summary>
        /// Gets or Sets Efficiency
        /// </summary>
        [DataMember(Name="efficiency", EmitDefaultValue=true)]
        public int? Efficiency { get; set; }

        /// <summary>
        /// Gets or Sets Intelligence
        /// </summary>
        [DataMember(Name="intelligence", EmitDefaultValue=true)]
        public int? Intelligence { get; set; }

        /// <summary>
        /// Gets or Sets OfficeStation
        /// </summary>
        [DataMember(Name="officeStation", EmitDefaultValue=true)]
        public Guid? OfficeStation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmployeeDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  WorkerType: ").Append(WorkerType).Append("\n");
            sb.Append("  Strength: ").Append(Strength).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  Efficiency: ").Append(Efficiency).Append("\n");
            sb.Append("  Intelligence: ").Append(Intelligence).Append("\n");
            sb.Append("  OfficeStation: ").Append(OfficeStation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmployeeDto);
        }

        /// <summary>
        /// Returns true if EmployeeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of EmployeeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeeDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.Experience == input.Experience ||
                    (this.Experience != null &&
                    this.Experience.Equals(input.Experience))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.WorkerType == input.WorkerType ||
                    (this.WorkerType != null &&
                    this.WorkerType.Equals(input.WorkerType))
                ) && 
                (
                    this.Strength == input.Strength ||
                    (this.Strength != null &&
                    this.Strength.Equals(input.Strength))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.Efficiency == input.Efficiency ||
                    (this.Efficiency != null &&
                    this.Efficiency.Equals(input.Efficiency))
                ) && 
                (
                    this.Intelligence == input.Intelligence ||
                    (this.Intelligence != null &&
                    this.Intelligence.Equals(input.Intelligence))
                ) && 
                (
                    this.OfficeStation == input.OfficeStation ||
                    (this.OfficeStation != null &&
                    this.OfficeStation.Equals(input.OfficeStation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.Experience != null)
                    hashCode = hashCode * 59 + this.Experience.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.WorkerType != null)
                    hashCode = hashCode * 59 + this.WorkerType.GetHashCode();
                if (this.Strength != null)
                    hashCode = hashCode * 59 + this.Strength.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                if (this.Efficiency != null)
                    hashCode = hashCode * 59 + this.Efficiency.GetHashCode();
                if (this.Intelligence != null)
                    hashCode = hashCode * 59 + this.Intelligence.GetHashCode();
                if (this.OfficeStation != null)
                    hashCode = hashCode * 59 + this.OfficeStation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // Age (int) maximum
            if(this.Age > (int)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Age, must be a value less than or equal to 99.", new [] { "Age" });
            }

            // Age (int) minimum
            if(this.Age < (int)18)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Age, must be a value greater than or equal to 18.", new [] { "Age" });
            }



            // Experience (float) maximum
            if(this.Experience > (float)25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Experience, must be a value less than or equal to 25.", new [] { "Experience" });
            }

            // Experience (float) minimum
            if(this.Experience < (float)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Experience, must be a value greater than or equal to 1.", new [] { "Experience" });
            }



            // Strength (int?) maximum
            if(this.Strength > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Strength, must be a value less than or equal to 100.", new [] { "Strength" });
            }

            // Strength (int?) minimum
            if(this.Strength < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Strength, must be a value greater than or equal to 1.", new [] { "Strength" });
            }



            // Commission (int?) maximum
            if(this.Commission > (int?)50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Commission, must be a value less than or equal to 50.", new [] { "Commission" });
            }

            // Commission (int?) minimum
            if(this.Commission < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Commission, must be a value greater than or equal to 1.", new [] { "Commission" });
            }



            // Efficiency (int?) maximum
            if(this.Efficiency > (int?)120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Efficiency, must be a value less than or equal to 120.", new [] { "Efficiency" });
            }

            // Efficiency (int?) minimum
            if(this.Efficiency < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Efficiency, must be a value greater than or equal to 1.", new [] { "Efficiency" });
            }



            // Intelligence (int?) maximum
            if(this.Intelligence > (int?)150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Intelligence, must be a value less than or equal to 150.", new [] { "Intelligence" });
            }

            // Intelligence (int?) minimum
            if(this.Intelligence < (int?)70)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Intelligence, must be a value greater than or equal to 70.", new [] { "Intelligence" });
            }

            yield break;
        }
    }

}
